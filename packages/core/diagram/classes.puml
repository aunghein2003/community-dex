@startuml
'https://plantuml.com/class-diagram

struct AccountState {
  status: AccountStatusEnum
  validating: boolean
  accountId?: string
  userId?: string
  address?: string
  isNew?: boolean
}

struct Wallet {
  walletName: string
  address: string
}

struct MessageFactor {
  data: string
  timestamp: number
}


Account::stateValue --> AccountState
Account::keyStore --> OrderlyKeyStore
Account::signer --> Singer
Account::walletAdapterManager --> WalletAdapterManager

OrderlyKeyStore *- OrderlyKeyPair : holds >
'Account *-- WalletAdapterManager

class Account {
-walletAdapterManager: WalletAdapterManager
-keyStore: OrderlyKeyStore
-_checkAccount():Promise<AccountStatusEnum>
-_checkAccountExist():Promise<AccountStatusEnum>
+stateValue: AccountState
+accountId: string
+accountIdHashStr: string
+address: string
+chainId: string
+signer: Singer
+setAddress(address: string, wallet: Wallet): Promise<AccountStatusEnum>
+createAccount(): Promise<any>
+createOrderlyKey(): Promise<any>
+destroyOrderlyKey(): Promise<void>
+settle(): Promise<any>
+disconnect():Promise<void>
}

WalletAdapterManager *-- WalletAdapter : holds >

'WalletAdapterManager::walletAdapters --> WalletAdapter
class WalletAdapterManager {
-walletAdapters: Map<string, WalletAdapter>
-currentWalletAdapter: WalletAdapter
-- getters --
+adapter: WalletAdapter
--
+new(walletAdapters: WalletAdapter[]): void
}

enum ChainNamespace {
  evm
  solana
}

interface Ed25519Keypair{
+secretKey: string;
+publicKey: string;
}

WalletAdapter::namespace --> ChainNamespace
interface WalletAdapter {
+name: string
+namespace: ChainNamespace
'--
'+generateKey(): Promise<OrderlyKeyPair>
-- lifecycle methods --
+active(config): void
+update(config): void
+deactivate(): void
-- getters/setters --
+get chainId: string
+set chainId(chainId: string): void
+get address: string
+set address(address: string): void
-- business methods --
+generateRegisterAccountMessage(): Promise<Message>
+generateAddOrderlyKeyMessage(): Promise<Message>
+generateSettleMessage(): Promise<Message>
+generateWithdrawMessage(): Promise<Message>
--
+generateSecretKey(): string
+send(method: string,params: Array<any> | Record<string, any>): Promise<any>
+sendTransaction(): Promise<ethers.TransactionResponse>
+on(eventName: string, listener: (...args: any[]) => void): void
+off(eventName: string, listener: (...args: any[]) => void): void
}

struct Message {
  +message: any;
  +signedMessage: string;
}
class Singer {
+sign(data: MessageFactor) => Promise<SignedMessagePayload>
+signText: (text: string) => Promise
}

interface Web3Provider{
+send(method: string,params: Array<any> | Record<string, any>): Promise<any>
+signTypedData(address: string, payload: Record<string, any>): Promise<any>
+...moreMethods(): void
}

class EthersProvider extends Web3Provider {
}

class ViemProvider #AliceBlue extends Web3Provider {
}

abstract class BaseWalletAdapter extends EventEmitter implements WalletAdapter {
'-active:boolean
+generateSecretKey(): string
}

'note top of EVMWalletAdapter: '@orderly.network/evm-wallet-adapter'.

interface OrderlyKeyStore {
-<<readonly>> networkId: string
+getOrderlyKey: (address?: string) => OrderlyKeyPair | null;
+getAccountId: (address: string) => string | undefined | null;
+setAccountId: (address: string, accountId: string) => void;
+getAddress: () => string | undefined | null;
+setAddress: (address: string) => void;
+removeAddress: () => void;
'+generateKey: () => OrderlyKeyPair;
+cleanKey: (address: string, key: string) => void;
+cleanAllKey: (address: string) => void;
+setKey: (orderlyKey: string, secretKey: OrderlyKeyPair) => void;
}

interface OrderlyKeyPair {
+secretKey: string;
+{abstract} generateKey(): OrderlyKeyPair
+getPublicKey(): Promise<string>;
+sign: (data: Uint8Array) => Promise<Uint8Array>;
}

EVMWalletAdapter::walletProvider --> Web3Provider
class EVMWalletAdapter extends BaseWalletAdapter {
+namespace: ChainNamespace.evm
+walletProvider: web3Provider
}

class SolanaWalletAdapter #Yellow extends BaseWalletAdapter {
+namespace: ChainNamespace.solana
}


@enduml
